<!DOCTYPE html>
<!-- saved from url=(0140)https://bcbmwn19ksbedndr.canva-hosted-embed.com/codelet/AAEAEGJjYm13bjE5a3NiZWRuZHIAAAAAAZcQBuV1xOTblZ5r_g_YCN4dOriRJj7aJ3_WpbYxrPGmVEkyR5w/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Character Chatbot</title>
    <script src="./Character Chatbot2_files/saved_resource"></script>
    <link href="./Character Chatbot2_files/css2" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        .chat-bubble {
            position: relative;
            border-radius: 1rem;
            padding: 1rem;
            margin-bottom: 1rem;
            max-width: 80%;
        }
        .user-bubble {
            background-color: #e2f5fe;
            margin-left: auto;
            border-bottom-right-radius: 0;
        }
        .bot-bubble {
            flex-direction: column;
            

            > img{
                width: 60px;
                height: 60px;
                margin-bottom: 3%;
            }

            > div{
                background-color: rgb(218, 192, 255);
                margin-right: auto;
                border-bottom-left-radius: 0;
            }
        }
        .chat-container {
            height: 60vh;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
        }
        .character-image {
            width: 100%;
            height: 100%;
            /* border-radius: 50%; */
            object-fit: cover;
            /* border: 3px solid white; */
            /* box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); */
        }
        .typing-indicator {
            display: flex;
            padding: 0.5rem 1rem;
            background: white;
            border-radius: 1rem;
            margin-bottom: 1rem;
            width: fit-content;
        }
        .typing-dot {
            width: 8px;
            height: 8px;
            background: #3b82f6;
            border-radius: 50%;
            margin: 0 2px;
            animation: typing 1.5s infinite ease-in-out;
        }
        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-6px); }
        }
        .tab-active {
            border-bottom: 3px solid #3b82f6;
            color: #3b82f6;
        }
        .image-option {
            cursor: pointer;
            transition: all 0.2s;
        }
        .image-option:hover {
            transform: scale(1.05);
        }
        .image-option.selected {
            border: 3px solid #3b82f6;
        }
        #ai-image {
            margin-bottom: 8%;
            width: 100%;
            height: 100%;
            /* margin-left: 30%; */
            /* position: absolute; */
        }
    </style>
<style>*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }/* ! tailwindcss v3.4.16 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}:host,html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-feature-settings:normal;font-variation-settings:normal;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,input:where([type=button]),input:where([type=reset]),input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]:where(:not([hidden=until-found])){display:none}.absolute{position:absolute}.relative{position:relative}.bottom-0{bottom:0px}.right-0{right:0px}.mx-auto{margin-left:auto;margin-right:auto}.mb-1{margin-bottom:0.25rem}.mb-2{margin-bottom:0.5rem}.mb-3{margin-bottom:0.75rem}.mb-4{margin-bottom:1rem}.ml-2{margin-left:0.5rem}.mr-1{margin-right:0.25rem}.mr-3{margin-right:0.75rem}.mt-2{margin-top:0.5rem}.mt-3{margin-top:0.75rem}.block{display:block}.inline-block{display:inline-block}.flex{display:flex}.grid{display:grid}.hidden{display:none}.h-10{height:2.5rem}.h-4{height:1rem}.h-5{height:1.25rem}.h-8{height:2rem}.w-10{width:2.5rem}.w-4{width:1rem}.w-5{width:1.25rem}.w-64{width:16rem}.w-8{width:2rem}.w-full{width:100%}.max-w-5xl{max-width:64rem}.flex-1{flex:1 1 0%}@keyframes spin{to{transform:rotate(360deg)}}.animate-spin{animation:spin 1s linear infinite}.grid-cols-1{grid-template-columns:repeat(1, minmax(0, 1fr))}.grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}.flex-col{flex-direction:column}.items-center{align-items:center}.justify-center{justify-content:center}.gap-2{gap:0.5rem}.gap-6{gap:1.5rem}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:9999px}.rounded-lg{border-radius:0.5rem}.rounded-md{border-radius:0.375rem}.rounded-xl{border-radius:0.75rem}.rounded-b-lg{border-bottom-right-radius:0.5rem;border-bottom-left-radius:0.5rem}.rounded-t-lg{border-top-left-radius:0.5rem;border-top-right-radius:0.5rem}.border{border-width:1px}.border-4{border-width:4px}.border-b{border-bottom-width:1px}.border-l{border-left-width:1px}.border-r{border-right-width:1px}.border-t{border-top-width:1px}.border-blue-500{--tw-border-opacity:1;border-color:rgb(59 130 246 / var(--tw-border-opacity, 1))}.border-gray-200{--tw-border-opacity:1;border-color:rgb(229 231 235 / var(--tw-border-opacity, 1))}.border-gray-300{--tw-border-opacity:1;border-color:rgb(209 213 219 / var(--tw-border-opacity, 1))}.border-t-transparent{border-top-color:transparent}.bg-blue-500{--tw-bg-opacity:1;background-color:rgb(59 130 246 / var(--tw-bg-opacity, 1))}.bg-blue-600{--tw-bg-opacity:1;background-color:rgb(37 99 235 / var(--tw-bg-opacity, 1))}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1))}.bg-gray-200{--tw-bg-opacity:1;background-color:rgb(229 231 235 / var(--tw-bg-opacity, 1))}.bg-gray-50{--tw-bg-opacity:1;background-color:rgb(249 250 251 / var(--tw-bg-opacity, 1))}.bg-green-600{--tw-bg-opacity:1;background-color:rgb(22 163 74 / var(--tw-bg-opacity, 1))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1))}.bg-gradient-to-r{background-image:linear-gradient(to right, var(--tw-gradient-stops))}.from-blue-500{--tw-gradient-from:#3b82f6 var(--tw-gradient-from-position);--tw-gradient-to:rgb(59 130 246 / 0) var(--tw-gradient-to-position);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to)}.to-indigo-600{--tw-gradient-to:#4f46e5 var(--tw-gradient-to-position)}.p-1{padding:0.25rem}.p-3{padding:0.75rem}.p-4{padding:1rem}.p-6{padding:1.5rem}.px-3{padding-left:0.75rem;padding-right:0.75rem}.px-4{padding-left:1rem;padding-right:1rem}.py-1{padding-top:0.25rem;padding-bottom:0.25rem}.py-2{padding-top:0.5rem;padding-bottom:0.5rem}.py-3{padding-top:0.75rem;padding-bottom:0.75rem}.text-center{text-align:center}.text-3xl{font-size:1.875rem;line-height:2.25rem}.text-sm{font-size:0.875rem;line-height:1.25rem}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-xs{font-size:0.75rem;line-height:1rem}.font-bold{font-weight:700}.font-medium{font-weight:500}.font-semibold{font-weight:600}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128 / var(--tw-text-opacity, 1))}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99 / var(--tw-text-opacity, 1))}.text-gray-700{--tw-text-opacity:1;color:rgb(55 65 81 / var(--tw-text-opacity, 1))}.text-gray-800{--tw-text-opacity:1;color:rgb(31 41 55 / var(--tw-text-opacity, 1))}.text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity, 1))}.opacity-90{opacity:0.9}.shadow-lg{--tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.transition{transition-property:color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.duration-200{transition-duration:200ms}.hover\:bg-blue-700:hover{--tw-bg-opacity:1;background-color:rgb(29 78 216 / var(--tw-bg-opacity, 1))}.hover\:bg-gray-300:hover{--tw-bg-opacity:1;background-color:rgb(209 213 219 / var(--tw-bg-opacity, 1))}.hover\:bg-green-700:hover{--tw-bg-opacity:1;background-color:rgb(21 128 61 / var(--tw-bg-opacity, 1))}.focus\:outline-none:focus{outline:2px solid transparent;outline-offset:2px}.focus\:ring-1:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.focus\:ring-2:focus{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.focus\:ring-blue-500:focus{--tw-ring-opacity:1;--tw-ring-color:rgb(59 130 246 / var(--tw-ring-opacity, 1))}@media (min-width: 768px){.md\:col-span-1{grid-column:span 1 / span 1}.md\:col-span-2{grid-column:span 2 / span 2}.md\:grid-cols-3{grid-template-columns:repeat(3, minmax(0, 1fr))}}</style></head>
<body class="p-4">
    <div class="max-w-5xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
        <div class="p-6 bg-gradient-to-r from-blue-500 to-indigo-600 text-white">
            <h1 class="text-3xl font-bold mb-2">Character Chatbot</h1>
            <p class="opacity-90">Set up the character you want and talk to him!</p>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
            <!-- Character Setup Panel -->
            <div class="md:col-span-1 bg-gray-50 p-4 rounded-lg">
                <h2 class="text-xl font-semibold mb-4 text-gray-800">Character Setting</h2>
                
                <div class="mb-4">
                    <label for="character-name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input type="text" id="character-name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Character name">
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Image</label>
                    <div class="flex border-b border-gray-200">
                        <button id="upload-tab" class="flex-1 py-2 text-center tab-active">Self upload</button>
                        <button id="ai-tab" class="flex-1 py-2 text-center">Generate with AI</button>
                    </div>
                    
                    <!-- Upload Image Tab -->
                    <div id="upload-content" class="py-3">
                        <div class="flex flex-col items-center">
                            <div class="mb-3 relative">
                                <img id="character-image" src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;120&#39; height=&#39;120&#39; viewBox=&#39;0 0 120 120&#39;%3E%3Ccircle cx=&#39;60&#39; cy=&#39;60&#39; r=&#39;60&#39; fill=&#39;%23e2e8f0&#39;/%3E%3Ccircle cx=&#39;60&#39; cy=&#39;45&#39; r=&#39;20&#39; fill=&#39;%23a0aec0&#39;/%3E%3Cpath d=&#39;M20,100 C20,70 100,70 100,100&#39; fill=&#39;%23a0aec0&#39;/%3E%3C/svg%3E" class="character-image" alt="Character">
                                <button id="change-image-btn" class="absolute bottom-0 right-0 bg-blue-500 text-white p-1 rounded-full w-8 h-8 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    </svg>
                                </button>
                            </div>
                            <input type="file" id="image-upload" class="hidden" accept="image/*">
                        </div>
                    </div>
                    
                    <!-- AI Generate Tab -->
                    <div id="ai-content" class="py-3 hidden">
                        <!-- <img id="ai-image" src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;120&#39; height=&#39;120&#39; viewBox=&#39;0 0 120 120&#39;%3E%3Ccircle cx=&#39;60&#39; cy=&#39;60&#39; r=&#39;60&#39; fill=&#39;%23e2e8f0&#39;/%3E%3Ccircle cx=&#39;60&#39; cy=&#39;45&#39; r=&#39;20&#39; fill=&#39;%23a0aec0&#39;/%3E%3Cpath d=&#39;M20,100 C20,70 100,70 100,100&#39; fill=&#39;%23a0aec0&#39;/%3E%3C/svg%3E" class="character-image" alt="Character"> -->
                        <img id="ai-image">
                        <form>
                            Style: 
                            <label>
                                <input type="radio" name="imageStyle" value="imagine-turbo" checked> default
                            </label>
                            <label>
                                <input type="radio" name="imageStyle" value="realistic"> realistic
                            </label>
                            <label>
                                <input type="radio" name="imageStyle" value="anime"> anime
                            </label>
                        </form>
                        <div class="mb-3">
                            <input type="text" id="image-prompt" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Character image description (e.g., wizard, astronaut, robot, etc.)">
                        </div>
                        <button id="generate-image-btn" class="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition duration-200 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4 2a2 2 0 00-2 2v11a3 3 0 106 0V4a2 2 0 00-2-2H4zm1 14a1 1 0 100-2 1 1 0 000 2zm5-1.757l4.9-4.9a2 2 0 000-2.828L13.485 5.1a2 2 0 00-2.828 0L10 5.757v8.486zM16 18H9.071l6-6H16a2 2 0 012 2v2a2 2 0 01-2 2z" clip-rule="evenodd"></path>
                            </svg>
                            Generate Image
                        </button>
                        
                        <div id="ai-loading" class="hidden mt-3 text-center">
                            <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent"></div>
                            <p class="mt-2 text-sm text-gray-600">Creating images...</p>
                        </div>
                        
                        <div id="ai-images-container" class="hidden mt-3 grid grid-cols-2 gap-2">
                            <!-- AI generated images will be placed here -->
                        </div>
                    </div>
                </div>
                
                <div class="mb-4">
                    <label for="character-settings" class="block text-sm font-medium text-gray-700 mb-1">World and character settings</label>
                    <textarea id="character-settings" rows="6" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Please describe the conversation style, worldbuilding, and character information."></textarea>
                </div>
                
                <button id="save-character" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-200">
                    Save Character
                </button>
            </div>
            
            <!-- Chat Panel -->
            <div class="md:col-span-2">
                <div class="bg-gray-100 rounded-t-lg p-4 flex items-center">
                    <img id="chat-character-image" src="data:image/svg+xml,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;120&#39; height=&#39;120&#39; viewBox=&#39;0 0 120 120&#39;%3E%3Ccircle cx=&#39;60&#39; cy=&#39;60&#39; r=&#39;60&#39; fill=&#39;%23e2e8f0&#39;/%3E%3Ccircle cx=&#39;60&#39; cy=&#39;45&#39; r=&#39;20&#39; fill=&#39;%23a0aec0&#39;/%3E%3Cpath d=&#39;M20,100 C20,70 100,70 100,100&#39; fill=&#39;%23a0aec0&#39;/%3E%3C/svg%3E" class="w-10 h-10 rounded-full mr-3" alt="Character">
                    <div>
                        <h3 id="chat-character-name" class="font-medium">Character</h3>
                        <p class="text-xs text-gray-500">Set up a character and start the conversation</p>
                    </div>
                </div>
                
                <div id="chat-container" class="chat-container bg-gray-50 border-l border-r border-gray-200">
                    <div class="bot-bubble chat-bubble">
                        Hello! Please set up your character on the left first. Enter your name, image, and character settings and we will talk accordingly.
                    </div>
                </div>
                
                <div class="bg-gray-100 rounded-b-lg p-3 border-t border-gray-200">
                    <form id="chat-form" class="flex gap-2">
                        <input type="text" id="user-input" class="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="enter a message...">
                        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition duration-200 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path>
                            </svg>
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="p-4 bg-gray-50 border-t border-gray-200 text-center text-sm text-gray-500">
            <p>This chatbot uses Gemini API and Imagine.art API. It works only when you enter an API key.</p>
            <div class="mt-2 flex justify-center">
                <input type="text" id="gemini-api-key" class="px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 w-64" placeholder="Enter Gemini API key">
                <button id="save-api-key" class="ml-2 bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded-md transition duration-200">Save</button>
            </div>
            <div class="mt-2">
                <input type="text" id="image-api-key" class="px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 w-64" placeholder="Enter imagine.art API key">
                <button id="save-image-api-key" class="ml-2 bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded-md transition duration-200">Save</button>
            </div>
        </div>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const characterImage = document.getElementById('character-image');
            const chatCharacterImage = document.getElementById('chat-character-image');
            const aiGenerateImage = document.getElementById('ai-image');
            const changeImageBtn = document.getElementById('change-image-btn');
            const imageUpload = document.getElementById('image-upload');
            const characterName = document.getElementById('character-name');
            const characterSettings = document.getElementById('character-settings');
            const saveCharacterBtn = document.getElementById('save-character');
            const chatCharacterName = document.getElementById('chat-character-name');
            const chatContainer = document.getElementById('chat-container');
            const chatForm = document.getElementById('chat-form');
            const userInput = document.getElementById('user-input');
            const geminiApiKeyInput = document.getElementById('gemini-api-key');
            const saveApiKeyBtn = document.getElementById('save-api-key');
            const imageApiKeyInput = document.getElementById('image-api-key');
            const saveImageApiKeyBtn = document.getElementById('save-image-api-key');
            const uploadTab = document.getElementById('upload-tab');
            const aiTab = document.getElementById('ai-tab');
            const uploadContent = document.getElementById('upload-content');
            const aiContent = document.getElementById('ai-content');
            const imagePrompt = document.getElementById('image-prompt');
            const generateImageBtn = document.getElementById('generate-image-btn');
            const aiLoading = document.getElementById('ai-loading');
            const aiImagesContainer = document.getElementById('ai-images-container');
            let isCallingAPI = false;
            
            // Character data
            let character = {
                name: '캐릭터',
                image: characterImage.src,
                settings: '',
                geminiApiKey: localStorage.getItem('geminiApiKey') || '',
                imageApiKey: localStorage.getItem('imageApiKey') || ''
            };
            
            // Load API keys from localStorage if available
            if (character.geminiApiKey) {
                geminiApiKeyInput.value = character.geminiApiKey;
            }
            
            if (character.imageApiKey) {
                imageApiKeyInput.value = character.imageApiKey;
            }
            
            // Tab switching
            uploadTab.addEventListener('click', () => {
                uploadTab.classList.add('tab-active');
                aiTab.classList.remove('tab-active');
                uploadContent.classList.remove('hidden');
                aiContent.classList.add('hidden');
            });
            
            aiTab.addEventListener('click', () => {
                aiTab.classList.add('tab-active');
                uploadTab.classList.remove('tab-active');
                aiContent.classList.remove('hidden');
                uploadContent.classList.add('hidden');
            });
            
            // Event Listeners
            changeImageBtn.addEventListener('click', () => {
                imageUpload.click();
            });
            
            imageUpload.addEventListener('change', (e) => {
                if (e.target.files && e.target.files[0]) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        characterImage.src = event.target.result;
                        chatCharacterImage.src = event.target.result;
                        character.image = event.target.result;
                    };
                    reader.readAsDataURL(e.target.files[0]);
                }
            });
            
            generateImageBtn.addEventListener('click', async () => {
                const prompt = imagePrompt.value.trim();
                if (!prompt) {
                    alert('Please enter an image description.');
                    return;
                }
                
                if (!character.imageApiKey) {
                    alert('Please save the API key for image creation first.');
                    return;
                }
                
                // Show loading indicator
                aiLoading.classList.remove('hidden');
                generateImageBtn.disabled = true;
                aiImagesContainer.classList.add('hidden');
                aiImagesContainer.innerHTML = '';
                
                try {
                    // Call image generation API
                    const englishPrompt = await translateWithGemini(prompt);
                    const imageStyle = document.querySelector('input[name="imageStyle"]:checked').value;
                    const images = await generateImaginArtImage(character.imageApiKey, englishPrompt, imageStyle);
                    
                    // Display generated images
                    aiImagesContainer.innerHTML = '';
                    // images.forEach((imageUrl, index) => {
                    //     const imgContainer = document.createElement('div');
                    //     imgContainer.className = 'image-option rounded-lg overflow-hidden';
                    //     imgContainer.dataset.imageUrl = imageUrl;
                        
                    //     const img = document.createElement('img');
                    //     img.src = imageUrl;
                    //     img.className = 'w-full h-auto';
                    //     img.alt = `Generated image ${index + 1}`;
                        
                    //     imgContainer.appendChild(img);
                    //     aiImagesContainer.appendChild(imgContainer);
                        
                    //     imgContainer.addEventListener('click', () => {
                    //         // Remove selected class from all images
                    //         document.querySelectorAll('.image-option').forEach(el => {
                    //             el.classList.remove('selected');
                    //         });
                            
                    //         // Add selected class to clicked image
                    //         imgContainer.classList.add('selected');
                            
                    //         // Set as character image
                    //         characterImage.src = imageUrl;
                    //         chatCharacterImage.src = imageUrl;
                    //         character.image = imageUrl;
                    //     });
                    // });
                    
                    aiImagesContainer.classList.remove('hidden');
                } catch (error) {
                    alert(`An error occurred during image creation: ${error.message}`);
                } finally {
                    // Hide loading indicator
                    aiLoading.classList.add('hidden');
                    generateImageBtn.disabled = false;
                }
            });
            
            saveCharacterBtn.addEventListener('click', () => {
                character.name = characterName.value || 'character';
                character.settings = characterSettings.value;
                
                chatCharacterName.textContent = character.name;
                
                // Add a system message about the character being set
                addMessage(`The character "${character.name }" is set. Start the conversation!`, 'bot');
            });
            
            saveApiKeyBtn.addEventListener('click', () => {
                character.geminiApiKey = geminiApiKeyInput.value;
                localStorage.setItem('geminiApiKey', character.geminiApiKey);
                alert('Gemini API key saved.');
            });
            
            saveImageApiKeyBtn.addEventListener('click', () => {
                character.imageApiKey = imageApiKeyInput.value;
                localStorage.setItem('imageApiKey', character.imageApiKey);
                alert('Imagine.art API key saved.');
            });
            
            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const message = userInput.value.trim();
                if (!message) return;
                
                // Add user message to chat
                addMessage(message, 'user');
                userInput.value = '';
                
                // Show typing indicator
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'typing-indicator';
                typingIndicator.innerHTML = `
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                `;
                chatContainer.appendChild(typingIndicator);
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                try {
                    // Check if API key is set
                    if (!character.geminiApiKey) {
                        throw new Error('Gemini API key is not set, please enter API key at the bottom.');
                    }
                    
                    // Call Gemini API
                    const response = await callGeminiAPI(message);
                    
                    // Remove typing indicator
                    typingIndicator.remove();
                    
                    // Add bot response to chat
                    addMessage(response, 'bot');
                } catch (error) {
                    // Remove typing indicator
                    typingIndicator.remove();
                    
                    // Add error message
                    addMessage(`An error has occurred: ${error.message}`, 'bot');
                }
            });
            
            // Function to add message to chat
            function addMessage(message, sender) {
                const bubble = document.createElement('div');
                
                if(sender === 'user'){
                    bubble.className = 'user-bubble chat-bubble';
                    bubble.textContent = message;
                }
                else{
                    bubble.className = 'bot-bubble';

                    const img = document.createElement('img');
                    img.src = character.image;

                    const chat = document.createElement('div');
                    chat.className = 'chat-bubble';
                    chat.textContent = message;

                    bubble.appendChild(img);
                    bubble.appendChild(chat);
                }
                // bubble.className = sender === 'user' ? 'user-bubble chat-bubble' : 'bot-bubble chat-bubble';
                // bubble.textContent = message;
                
                chatContainer.appendChild(bubble);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            // Function to call Gemini API
            async function callGeminiAPI(message) {
                if(isCallingAPI) return;
                else isCallingAPI = true;

                const apiKey = character.geminiApiKey;
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
                
                // Create prompt with character settings
                let prompt = '';
                if (character.settings) {
                    prompt = `You are a character with the following settings:  
                    Name: ${character.name}  
                    Details: ${character.settings}  
  
                    Respond according to the above settings. Always stay in character and remain consistent with the worldbuilding.  
                    Reply in the same language the user uses.  
  
                    User: ${message}  
                    Character:`;  
                } else {
                    prompt = `You are a character named ${character.name}. Have a conversation with the user.  
                    Respond in the same language the user uses.  
                    
                    User: ${message}  
                    Character:`;  
                }
                
                const requestBody = {
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }]
                };
                
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error?.message || 'An unknown error occurred.');
                }
                
                const data = await response.json();
                isCallingAPI = false;
                return data.candidates[0].content.parts[0].text.trim();
            }

            async function translateWithGemini(textToTranslate) {
                const apiKey = character.geminiApiKey;
                const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

                // Construct the prompt for Gemini, asking it to translate.
                const prompt = `If the following text is in English, give it back as it is, and if it is not in English, please translate it into English:

            text: "${textToTranslate}"

            English translation:`;

                const requestBody = {
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    // Optional: Add generationConfig if you need to control output further
                    // generationConfig: {
                    //   temperature: 0.3, // Lower temperature for more deterministic translation
                    //   maxOutputTokens: 100, // Adjust as needed
                    // }
                };

                try {
                    const response = await fetch(GEMINI_API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestBody)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('Gemini API request failed:', errorData);
                        throw new Error(errorData.error?.message || 'Translation API request failed with status: ' + response.status);
                    }

                    const data = await response.json();

                    if (data.candidates && data.candidates.length > 0 &&
                        data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
                        let translatedText = data.candidates[0].content.parts[0].text.trim();
                        
                        // Sometimes the model might add quotes or prefixes, try to clean them.
                        // This is a basic cleanup and might need adjustment based on observed model behavior.
                        translatedText = translatedText.replace(/^["'](.*)["']$/, '$1'); // Remove surrounding quotes
                        
                        console.log(`Original: "${textToTranslate}", Translated: "${translatedText}"`);
                        return translatedText;
                    } else {
                        console.error('Invalid response structure from Gemini API:', data);
                        throw new Error('Could not extract translated text from API response.');
                    }

                } catch (error) {
                    console.error('Error during translation with Gemini:', error);
                    // Fallback or re-throw error:
                    // For the chatbot, you might want to alert the user or try with original text
                    // For now, we re-throw so the caller can decide.
                    throw error;
                }
            }
            
            // API 호출 함수
            async function generateImaginArtImage(apiKey, prompt, style = "imagine-turbo", aspectRatio = "1:1", seed = null) {
                const formData = new FormData();
                formData.append("prompt", prompt);
                formData.append("style", style);

                if (aspectRatio) {
                    formData.append("aspect_ratio", aspectRatio);
                }

                if (seed !== null) {
                    formData.append("seed", seed.toString());
                }

                try {
                    const response = await fetch("https://api.vyro.ai/v2/image/generations", {
                        method: "POST",
                        headers: {
                            "Authorization": `Bearer ${apiKey}`
                        },
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    // const contentType = response.headers.get("Content-Type");
                    // console.log("🔍 Content-Type:", contentType);

                    const blob = await response.blob();  // 이미지 Blob으로 받기
                    const imageUrl = URL.createObjectURL(blob);  // 브라우저에서 사용할 수 있는 URL 생성

                    // console.log("✅ 이미지 URL 생성됨:", imageUrl);

                    // 예시: 이미지 태그에 넣기
                    // const img = document.createElement("img");
                    // img.src = imageUrl;
                    // img.alt = "Generated Image";
                    // img.style.maxWidth = "100%";
                    // document.body.appendChild(img);
                    chatCharacterImage.src = imageUrl;
                    aiGenerateImage.src = imageUrl;
                    character.image = imageUrl;


                    return imageUrl;
                } catch (err) {
                    console.error("❌ Error requesting image:", err);
                    return null;
                }
            }


        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'945a993f41f83115',t:'MTc0ODIzNDQ3MC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script><iframe height="1" width="1" style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;" src="./Character Chatbot2_files/saved_resource.html"></iframe>
</body><whale-quicksearch translate="no"><template shadowrootmode="closed"><style></style><div class="anchor"></div><div class="quicksearch mac" data-version="a3e1044"></div></template></whale-quicksearch><widget-window style="opacity: 1; background-color: rgb(255, 255, 255); border: 1px solid rgb(135, 132, 129); left: calc(50% - 195px); top: calc(50% - 250px); width: auto; height: auto; display: none;"><template shadowrootmode="open">
<style>*{margin:0;padding:0;user-select:none}#content{display:grid;grid-template-rows:40px calc(100% - 55px) 15px;height:100%;grid-template-columns:100%;box-sizing:border-box}#header{overflow:hidden;z-index:2000;height:40px;margin-bottom:-1px;font-family:Helvetica,sans-serif;font-size:12px;line-height:1.25em;box-sizing:border-box;cursor:move}#header h1{margin-left:10px;height:39px;font-weight:normal;color:#878481;position:relative;display:inline-block;white-space:nowrap;box-sizing:border-box;padding:14px 5px;font-size:12px;letter-spacing:-0.05em;font-weight:normal;align-content:center}#header #opacity-bar{-webkit-appearance:none;position:absolute;right:35px;top:18px;width:50px;margin-right:10px}#header #opacity-bar:focus{outline:none}#header #opacity-bar::-webkit-slider-runnable-track{width:100%;height:3px;cursor:pointer;border-radius:2px;background:#878481}#header #opacity-bar::-webkit-slider-thumb{border:0px;border-radius:100%;height:10px;width:10px;background:#c3c2c0;cursor:pointer;-webkit-appearance:none;margin-top:-3px}.window-close{position:absolute;right:0;top:0;padding:10px;cursor:pointer}.window-close:hover{filter:brightness(0%)}#header:active::before{position:fixed;content:"";top:0;left:0;width:100vw;height:100vh;background-color:rgba(0,0,0,0)}table#main{overflow:hidden;width:100%;height:100%;min-height:44px;grid-template-rows:30px calc(100% - 30px);box-sizing:border-box;display:grid;border-spacing:2px;position:relative}table#main thead{border-bottom:1px solid #eee;margin:0 5px}table#main thead tr{display:grid;grid-template-columns:auto 75px 65px 75px;font-size:12px;line-height:1.7em;font-family:sans-serif}table#main thead tr th{clip:auto;height:34px;line-height:34px;font-size:12px;color:#878481;position:static !important;font-weight:normal}table#main tbody{overflow-y:scroll;height:100%;text-align:center}table#main tbody::-webkit-scrollbar{width:5px}table#main tbody::-webkit-scrollbar-thumb{background-color:rgba(135,132,129,.4);border-radius:5px}table#main tbody tr{display:grid;height:22px;grid-template-columns:auto 75px 65px 75px;font-size:12px;line-height:1.7em;font-family:sans-serif}table#main tbody tr td{padding-top:2px;font-size:12px;line-height:1.7em;font-family:sans-serif;color:#666;border-bottom:1px solid #eee}table#main tbody tr td:first-child{text-align:left;padding-left:15px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;margin-left:5px}table#main tbody tr td:nth-child(2){text-align:right;font-size:11px}table#main tbody tr td:nth-child(3){text-align:right;font-size:11px}table#main tbody tr td:nth-child(3).lower-stock{color:#017eff}table#main tbody tr td:nth-child(3).upper-stock{color:#e12301}table#main tbody tr td:nth-child(4){font-family:sans-serif;position:relative}table#main tbody tr td:nth-child(4) span{position:absolute;width:55px;height:22px;right:15px;text-align:right;font-size:11px}table#main tbody tr td:nth-child(4) span.lower-stock{color:#017eff}table#main tbody tr td:nth-child(4) span.upper-stock{color:#e12301}.icon{width:8px;margin-right:3px;display:inline-block;vertical-align:middle;overflow:hidden}*::-webkit-scrollbar:not(tbody){width:0}</style>
<div id="content">
    <div id="header">
        <h1 id="widget-title">undefined</h1>
        <input id="opacity-bar" type="range" min="1" max="100" style="opacity: 0.31;">
        <span class="window-close" style="opacity: 0.31;"><img alt="미니위젯 닫기" class="window-close" src="chrome-extension://loboidpmlojcalnkgelcncghllmkiico/img/close.svg" width="20" height="20" style="opacity: 0.31;"></span>
    </div>
    <div id="footer"></div>
</div></template></widget-window></html>